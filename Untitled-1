var express = require('express');
var router = express.Router();
var request = require('request'); // "Request" library
var querystring = require('querystring');
var cookieParser = require('cookie-parser');

var SpotifyWebApi = require('spotify-web-api-node');

// credentials are optional
var spotifyApi = new SpotifyWebApi({
  clientId : '9d278bfaff2f4444af5b9ab67d5a0fd2',
  clientSecret : '5de0bf8d71344d468c0d9f0432ad0478',
  redirectUri : 'http://localhost/callback'
});


var scopes = ['user-read-private', 'user-read-email'],
    redirectUri = 'http://localhost:3000/callback',
    clientId = '9d278bfaff2f4444af5b9ab67d5a0fd2',
    state = 'staTe of onion';

// Setting credentials can be done in the wrapper's constructor, or using the API object's setters.
var spotifyApi = new SpotifyWebApi({
  redirectUri : redirectUri,
  clientId : clientId
});

// Create the authorization URL
var authorizeURL = spotifyApi.createAuthorizeURL(scopes, state);

console.log(authorizeURL);



/* GET home page. */
router.get('/', function(req, res, next) {
  res.redirect(authorizeURL);
  res.render('index', { title: 'Album of the Day' });
});

/* GET Albumlist page */
router.get('/albumlist', function(req, res, next) {
  var db = req.db;
  /*
  spotifyApi.searchArtists('A Secret Wish')
  .then(function(data) {
    console.log('Search artists by "Love"', data.body);
  }, function(err) {
    console.error(err);
  });
  
  
  spotifyApi.getUser('craigsin')
  .then(function(data) {
    console.log('Some information about this user', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });
  
  // Get the authenticated user
  spotifyApi.getMe()
  .then(function(data) {
    console.log('Some information about the authenticated user', data.body);
  }, function(err) {
    console.log('Something went wrong!', err);
  });

  */
  
  var collection = db.get('AlbumsV2');
  collection.find({},{},function(e,docs) {
    res.render('albumlist', {"albumlist":docs});
  });
});

/* GET New Album page */
router.get('/newalbum', function(req, res, next) {
  res.render('newalbum', { title: 'Add New Album' });
});





/* GET New Album page */
router.get('/newalbumform', function(req, res, next) {
  res.render('newalbumform', { title: 'Add New Album' });
  
});

var Gracenote = require("node-gracenote");
var clientId = "347978252-3D569FC495267E0B0972359FD44CBFAA";

var Gracenote = require("node-gracenote");
var clientTag = "GreatListens";
var userId = null;
var api = new Gracenote(clientId,clientTag,userId);
api.register(function(err, uid) {
    userId = uid;
    console.log("UID " + uid );
});





router.get('/searching', function(req, res){
  console.log("searching res");
console.log( req.query )  
var api = new Gracenote(clientId,clientTag,userId);
var album_Artist          = req.query.artist;
var album_Title           = req.query.title;
console.log("Album   : " +album_Title)
console.log("Artist  : " +album_Artist)
api.searchAlbum(album_Artist, album_Title, function(err, result) {
    console.log( result[0] );
    res.send(result[0]);
});  
  
  
  
  
});

var Twitter = require('twitter');
 
var client = new Twitter({
  consumer_key: 'oQ7M776dqtPRo8xiuyvPTvyO2',
  consumer_secret: '3fG3AaNcmlzR4fbzHj6D7LMGJKs8lgzZUEEVA4aWOx60i877e7',
  access_token_key: '728843104883748864-rnuwnd6p5omd31xcwfHoPS3CIyop07k',
  access_token_secret: 'uWUBu6M5hdyNcqpvwexeBzkYig04hrrQEcJzpTxOPFvzx'
});

// see the following for details on tweeting the new album.
// https://www.npmjs.com/package/twitter
/* POST to Add Album Service */
router.post('/addalbum', function(req, res)
{
    var db = req.db;

    // Get our form values. These rely on the "name" attributes  
    var album_DateRecommended = req.body.DateRecommended;
    var album_RecommendedBy   = req.body.RecommendedBy;
    var album_Artist          = req.body.Artist;
    var album_Album           = req.body.Album;

    var collection = db.get('AlbumsV2');

    // Submit to the DB
    collection.insert(
      { "DateRecommended" : album_DateRecommended,
        "RecommendedBy"   : album_RecommendedBy,
        "Artist"          : album_Artist,
        "Album"           : album_Album },
      function(err, doc)
      {
          if (err)
          {
              // If it failed, return error
              res.send("There was a problem adding the information to the database.");
          }
          else
          {
              // And forward to success page
              res.redirect("albumlist");
          }
      });
      
      msg = "Album : " + album_Album + "\n" + "Artist : " + album_Artist
      client.post('statuses/update', {status: msg},  function(error, tweet, response){
        if(error) throw error;
        console.log(tweet);  // Tweet body. 
        console.log(response);  // Raw response object. 
      });
});

module.exports = router;




router.get('/callback', function(req, res) {

  // your application requests refresh and access tokens
  // after checking the state parameter

  var code = req.query.code || null;
  var state = req.query.state || null;
  var storedState = req.cookies ? req.cookies[stateKey] : null;

  if (state === null || state !== storedState) {
    res.redirect('/#' +
      querystring.stringify({
        error: 'state_mismatch'
      }));
  } else {
    res.clearCookie(stateKey);
    var authOptions = {
      url: 'https://accounts.spotify.com/api/token',
      form: {
        code: code,
        redirect_uri: "http://localhost:3000/callback",
        grant_type: 'authorization_code'
      },
      headers: {
        'Authorization': 'Basic ' + (new Buffer("9d278bfaff2f4444af5b9ab67d5a0fd2" + ':' + "5de0bf8d71344d468c0d9f0432ad0478").toString('base64'))
      },
      json: true
    };

    request.post(authOptions, function(error, response, body) {
      if (!error && response.statusCode === 200) {

        var access_token = body.access_token,
            refresh_token = body.refresh_token;

        var options = {
          url: 'https://api.spotify.com/v1/me',
          headers: { 'Authorization': 'Bearer ' + access_token },
          json: true
        };

        // use the access token to access the Spotify Web API
        request.get(options, function(error, response, body) {
          console.log(body);
        });

        // we can also pass the token to the browser to make requests from there
        res.redirect('/#' +
          querystring.stringify({
            access_token: access_token,
            refresh_token: refresh_token
          }));
      } else {
        res.redirect('/#' +
          querystring.stringify({
            error: 'invalid_token'
          }));
      }
    });
  }
  
  doSearch("Automatic", function(result) {
				console.log('got word result', result);
			});
});


